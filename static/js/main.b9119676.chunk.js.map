{"version":3,"sources":["Assets/profile.jpg","components/Navbar.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","props","navData","navbarData","className","class","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","href","this","link1","link2","Component","Landing","LanData","landingData","src","require","alt","onClick","twitterLink","target","rel","githubLink","facebookLink","FirstName","LastName","about","App","state","profileData","LandingData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2pCAAAA,EAAOC,QAAU,IAA0B,qC,qICgC5BC,E,YA7Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,QAAUD,EAAME,WAHJ,E,sEAQnB,OACE,yBAAKC,UAAU,qCACb,4BAAQC,MAAM,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,cAAY,mBAC9EC,gBAAc,mBAAmBC,gBAAc,QAAQC,aAAW,qBAClE,0BAAMN,MAAM,yBAEZ,yBAAKD,UAAU,2BAA2BQ,GAAG,mBAC3C,wBAAIR,UAAU,cACZ,wBAAIA,UAAU,yBACZ,uBAAGA,UAAU,WAAWS,KAAK,KAAKC,KAAKZ,QAAQa,QAEjD,wBAAIX,UAAU,yBACZ,uBAAGA,UAAU,WAAWS,KAAK,KAAKC,KAAKZ,QAAQc,e,GArBxCC,a,OCiCNC,E,YA/Bb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAEDkB,QAAUlB,EAAMmB,YAHJ,E,sEAQjB,OACE,yBAAKhB,UAAU,cACb,wBAAIA,UAAU,YACZ,wBAAIA,UAAU,0BACZ,yBAAKQ,GAAG,WAAWR,UAAU,GAAGiB,IAAKC,EAAQ,IAA0BC,IAAI,cAAcC,QAAQ,0BACnG,yBAAKpB,UAAU,UACb,uBAAGS,KAAMC,KAAKK,QAAQM,YAAaC,OAAO,SAASC,IAAI,sBAAsBtB,MAAM,kBACrF,uBAAGQ,KAAMC,KAAKK,QAAQS,WAAYF,OAAO,SAASC,IAAI,sBAAsBtB,MAAM,iBACpF,uBAAGQ,KAAMC,KAAKK,QAAQU,aAAcH,OAAO,SAASC,IAAI,sBAAsBtB,MAAM,qBAGlF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,gBAAgBU,KAAKK,QAAQW,UAA1C,IAAsDhB,KAAKK,QAAQY,UACnE,yBAAK3B,UAAU,iBACZU,KAAKK,QAAQa,c,GAvBNf,aC8BPgB,G,kBA1Bb,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KACDiC,MAAQ,CACXhC,QAAUiC,EAAYhC,WACtBiB,YAAae,EAAYC,aAJV,E,sEASjB,OACE,yBAAKhC,UAAU,WACb,kBAAC,EAAD,CAAQD,WAAYW,KAAKoB,MAAMhC,UAC/B,kBAAC,EAAD,CAASkB,YAAaN,KAAKoB,MAAMd,cACjC,yBAAKhB,UAAU,IAAf,mBACkB,6BADlB,KAEI,6BAAK,6BAAK,6BAAK,6BAAK,6BAFxB,OAGM,6BAHN,KAII,6BAJJ,KAIW,6BAAK,6BAAK,6BAAK,6BAAK,6BAJ/B,KAIsC,6BAAK,6BAAK,6BAAK,6BAAK,6BAJ1D,KAIiE,6BAAK,6BAAK,6BAAK,6BAAK,6BAJrF,KAKI,6BAAK,6BAAK,6BAAK,6BAAK,6BALxB,KAK+B,6BAAK,6BAAK,6BAAK,6BAAK,6BALnD,KAK0D,6BAAK,6BAAK,6BAAK,6BAAK,6BAL9E,kB,GAdUa,cCMEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9119676.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.494f673f.jpg\";","import React,{ Component } from 'react';\n\nclass Navbar extends Component{\n  constructor(props) {\n    super(props);\n\n    this.navData = props.navbarData;\n\n  }\n\nrender() {\n  return(\n    <nav className='my_nav fixed-top navbar-expand-md'>\n      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#my_nav_collapse\"\n        aria-controls=\"#my_nav_collapse\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n        <div className='collapse navbar-collapse' id='my_nav_collapse'>\n          <ul className='navbar-nav'>\n            <li className='navbar_links nav-item'>\n              <a className='nav-link' href='#'>{this.navData.link1}</a>\n            </li>\n            <li className='navbar_links nav-item'>\n              <a className='nav-link' href='#'>{this.navData.link2}</a>\n            </li>\n          </ul>\n        </div>\n    </nav>\n  )\n}\n}\n\nexport default Navbar;\n","import React,{ Component } from 'react';\n// import image from '../Assets/profile.jpg'\n\nclass Landing extends Component {\n  constructor(props) {\n    super(props);\n\n    this.LanData = props.landingData;\n\n  }\n\n  render(){\n    return(\n      <div className='land_cover'>\n        <ul className='list row'>\n          <li className='col-md-4 image_section'>\n            <img id='my_photo' className='' src={require('../Assets/profile.jpg')} alt='profile pic' onClick='../Assets/profile.jpg'></img>\n          <div className='social'>\n            <a href={this.LanData.twitterLink} target='_blank' rel='noopener noreferrer' class=\"fa fa-twitter\"></a>\n          <a href={this.LanData.githubLink} target='_blank' rel='noopener noreferrer' class=\"fa fa-github\"></a>\n        <a href={this.LanData.facebookLink} target='_blank' rel='noopener noreferrer' class=\"fa fa-facebook\"></a>\n          </div>\n          </li>\n          <li className='col-md-8'>\n            <p className='name_section'>{this.LanData.FirstName} {this.LanData.LastName}</p>\n            <div className='other_section'>\n              {this.LanData.about}\n            </div>\n          </li>\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default Landing;\n","import React,{ Component } from 'react';\nimport Navbar from './components/Navbar';\nimport profileData from './profileData.json';\nimport Landing from './components/Landing';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      navData : profileData.navbarData,\n      landingData: profileData.LandingData\n    }\n\n  }\n  render () {\n    return (\n      <div className=\"bgimage\">\n        <Navbar navbarData={this.state.navData}/>\n        <Landing landingData={this.state.landingData}/>\n        <div className=''>\n          from app.js file<br/>\n          hi<br/><br/><br/><br/><br/>\n          this<br/>\n          is<br/>hi<br/><br/><br/><br/><br/>hi<br/><br/><br/><br/><br/>hi<br/><br/><br/><br/><br/>\n          hi<br/><br/><br/><br/><br/>hi<br/><br/><br/><br/><br/>hi<br/><br/><br/><br/><br/>\n          last line\n        </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}